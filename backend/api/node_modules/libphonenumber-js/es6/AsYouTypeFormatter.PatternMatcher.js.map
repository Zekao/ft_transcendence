{"version":3,"file":"AsYouTypeFormatter.PatternMatcher.js","names":["PatternMatcher","pattern","matchTree","PatternParser","parse","string","allowOverflow","Error","result","match","split","matchedChars","overflow","characters","tree","last","length","characterString","join","indexOf","partialMatch","slice","Array","isArray","restCharacters","i","subtree","JSON","stringify","op","args","branch","char","OPERATOR","RegExp","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","branches","concat","push","pop","test","getContext","operator","before","index","rightPart","startContext","endContext","oneOfSet","parseOneOfSet","values","prevValue","charCodeAt","nextValue","value","String","fromCharCode"],"sources":["../source/AsYouTypeFormatter.PatternMatcher.js"],"sourcesContent":["export default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\nfunction match(characters, tree, last) {\r\n\tif (typeof tree === 'string') {\r\n\t\tif (last) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toverflow: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nclass PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn [{\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([instructions])\r\n\t\t\t}]\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}"],"mappings":"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"}