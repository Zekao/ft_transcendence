version: '3.7'

# ************************************************************
# *                  VOLUMES                                 *
# ************************************************************
volumes:
    database:
    certificates:

# ************************************************************
# *                  SERVICES                                *
# ************************************************************
services:

    # *******************REVERSE-PROXY*******************
  reverse-proxy:
    image: "traefik:v2.4"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=default"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.leresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.leresolver.acme.email=gamarcha@student.42.fr"
      - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certificates:/letsencrypt
    ports:
      - "4499:80"
      - "4500:443"
    restart: unless-stopped

      # *******************FRONTEND*******************

  client:
    image: node:16-alpine
    working_dir: /app
    entrypoint: |
      /bin/sh -c "
        yarn dev --dotenv ../.env
      "
    volumes:
      - ./client:/app
      - ./.env:/.env
    # ports:
    #   - ${SERVER_PORT_FRONT}:${SERVER_PORT_FRONT}
    env_file:
      - .env
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`ft.localhost`)"
      - "traefik.http.services.client.loadbalancer.server.port=4500"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.routers.client.tls.certresolver=leresolver"

    # *******************API*******************
  api:
    image: node:16-alpine
    working_dir: /app
    entrypoint: |
      /bin/sh -c "
        npm install;
        npm run build;
        npm run start:dev
      "
    volumes:
      - ./backend/api/:/app
    # ports:
    #   - ${SERVER_PORT_BACK}:${SERVER_PORT_BACK}
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - database
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`ft.localhost`) && PathPrefix(`/api/`)"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.pathstrip.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=pathstrip@docker"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=leresolver"

    # *******************DATABASE*******************
  database:
    image: postgres:latest
    command: postgres -c stats_temp_directory=/tmp
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    ports:
      - 5432:5432
    volumes:
      - database:/var/lib/postgresql/data

    # *******************ADMINER*******************
  adminer:
    image: adminer
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - database
